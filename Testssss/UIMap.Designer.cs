// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Testssss
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Just some basic inputs into the spreadsheet
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            #endregion

            // The recording for the application under test '\\chips.eng.utah.edu\home\samuelg\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.vshost.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(39, 38));

            // Type 'hello{Space}world{Enter}2{Enter}=A2{Enter}={Space}A3{Space}{+}{Space}a5{Enter}2{Enter}={Space}a1' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '{+}a1{+}A1{+}A1{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 137));

            // Type '{Enter}=a2{+}a2{+}a2{+}a2{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// Just a general test for changing spreadsheet cells
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIRunButton = this.UIOpenFileSecurityWarnWindow.UIRunWindow.UIRunButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uICellContentsEdit = this.UISpreadsheetWindow.UICellContentsWindow.UICellContentsEdit;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsEdit1 = this.UISpreadsheetWindow.UICellContentsWindow.UICellContentsEdit1;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UIUnsavedWorkAlertWindow.UINOWindow.UINOButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(76, 88));

            // Click '&Run' button
            Mouse.Click(uIRunButton, new Point(14, 13));

            // The recording for the application under test '\\vmware-host\Shared Folders\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '2' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod2Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '{RShiftKey}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.RecordedMethod2Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Click 'CellContents' text box
            Mouse.Click(uICellContentsEdit, new Point(-252, -95));

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys, ModifierKeys.None);

            // Type '=A1' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Type '=A1+A2' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText1;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys2, ModifierKeys.None);

            // Type '30' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText2;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(-59, -56));

            // Click 'CellContents' text box
            Mouse.Click(uICellContentsEdit1, new Point(-239, -90));

            // Type '30' in 'CellContents' text box
            uICellContentsEdit.Text = this.RecordedMethod2Params.UICellContentsEditText3;

            // Type '{Enter}' in 'CellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.RecordedMethod2Params.UICellContentsEditSendKeys4, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(-680, -71));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(-552, -351));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIUnsavedWorkAlertWindow UIUnsavedWorkAlertWindow
        {
            get
            {
                if ((this.mUIUnsavedWorkAlertWindow == null))
                {
                    this.mUIUnsavedWorkAlertWindow = new UIUnsavedWorkAlertWindow();
                }
                return this.mUIUnsavedWorkAlertWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIUnsavedWorkAlertWindow mUIUnsavedWorkAlertWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'hello{Space}world{Enter}2{Enter}=A2{Enter}={Space}A3{Space}{+}{Space}a5{Enter}2{Enter}={Space}a1' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "hello{Space}world{Enter}2{Enter}=A2{Enter}={Space}A3{Space}{+}{Space}a5{Enter}2{E" +
            "nter}={Space}a1";
        
        /// <summary>
        /// Type '{+}a1{+}A1{+}A1{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{+}a1{+}A1{+}A1{Enter}";
        
        /// <summary>
        /// Type '{Enter}=a2{+}a2{+}a2{+}a2{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "{Enter}=a2{+}a2{+}a2{+}a2{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "2";
        
        /// <summary>
        /// Type '{RShiftKey}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{RShiftKey}";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "=A1+A2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '30' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "30";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '30' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "30";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UICellContentsWindow UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow(this);
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UICellContentsWindow mUICellContentsWindow;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellContentsWindow : WinWindow
    {
        
        public UICellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContents";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsEdit
        {
            get
            {
                if ((this.mUICellContentsEdit == null))
                {
                    this.mUICellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit;
            }
        }
        
        public WinEdit UICellContentsEdit1
        {
            get
            {
                if ((this.mUICellContentsEdit1 == null))
                {
                    this.mUICellContentsEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "2";
                    this.mUICellContentsEdit1.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsEdit;
        
        private WinEdit mUICellContentsEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow(this);
                }
                return this.mUIRunWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIRunWindow mUIRunWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIRunButton
        {
            get
            {
                if ((this.mUIRunButton == null))
                {
                    this.mUIRunButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRunButton.SearchProperties[WinButton.PropertyNames.Name] = "Run";
                    this.mUIRunButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIRunButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRunButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUnsavedWorkAlertWindow : WinWindow
    {
        
        public UIUnsavedWorkAlertWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Unsaved Work Alert";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Unsaved Work Alert");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Unsaved Work Alert");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Unsaved Work Alert");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
